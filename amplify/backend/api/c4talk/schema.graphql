type Player
  @model(subscriptions: null)
  @key(
    name: "playersByUsername"
    fields: ["username"]
    queryField: "playersByUsername"
  )
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: owner, operations: [update] }
      { allow: groups, groups: ["forbiddenGroup"], operations: [delete] }
    ]
  ) {
  id: ID!
  username: String!
    @auth(
      rules: [
        { allow: groups, groups: ["forbiddenGroup"], operations: [update] }
      ]
    )
  bio: String
  profilePic: String
}

type Game
  @model
  @key(
    fields: ["sentToPlayer", "gameStatus"]
    name: "gamesBySentToPlayer"
    queryField: "gamesBySentToPlayer"
  )
  @key(
    fields: ["createdByPlayer", "gameStatus"]
    name: "gamesCreatedBySelf"
    queryField: "gamesCreatedBySelf"
  )
  @auth(rules: [{ allow: private, operations: [create, read, update] }]) {
  id: ID!
  createdByPlayer: String!
  sentToPlayer: String!
  gameName: GAME_NAME
  player1: String!
  player2: String!
  currentPlayer: String!
  board: AWSJSON!
  gameStatus: GAME_STATUS!
  messages: [Message]
}

type Message {
  sender: String
  message: String
}

enum GAME_STATUS {
  LOBBY_PENDING
  LOBBY_IN_PROGRESS
  ENDED
}

enum GAME_NAME {
  CONNECT_4
}

type Subscription {
  onGameCreatedForSelf(sentToPlayer: String!): Game
    @aws_subscribe(mutations: ["createGame"])

  onGameUpdatedByID(id: ID!): Game @aws_subscribe(mutations: ["updateGame"])
}
